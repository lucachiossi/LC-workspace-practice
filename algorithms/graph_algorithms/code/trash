    // debug AdjacencyList methods
    std::map<int,AdjVertex*>* vertecesList = adj_list.getVerteces();
    std::map<int,AdjEdge*>* edgesList = adj_list.getEdges();
    adj_list.insertVertex();
    adj_list.insertVertex();
    adj_list.insertEdge(10,9);
    adj_list.insertEdge(10,3);
    adj_list.insertEdge(1,7);
    adj_list.insertEdge(30,30);
    std::cout << adj_list.printGraph();
    std::cout << "incidence 1,7: " << vertecesList->find(1)->second->isIncidentTo(vertecesList->find(7)->second) << std::endl;
    std::cout << "incidence 5,6: " << vertecesList->find(5)->second->isIncidentTo(vertecesList->find(6)->second) << std::endl;
    vertecesList->find(1)->second->setExplored(true);
    vertecesList->find(3)->second->setExplored(true);
    vertecesList->find(4)->second->setExplored(true);
    vertecesList->find(8)->second->setExplored(true);
    std::cout << adj_list.printGraph();
    adj_list.resetExploration();
    std::cout << adj_list.printGraph();

    // debug BFS and DFS exploration
    AdjVertex* startVertex = vertecesList->find(1)->second;
    AdjVertex* endVertex = vertecesList->find(9)->second;
    BreadthFirstSearch bfs(startVertex);
    bfs.printExploration();
    adj_list.resetExploration();
    DepthFirstSearch dfs(startVertex);
    dfs.printExploration();
    adj_list.resetExploration();
    std::shared_ptr<BreadthFirstSearch> bfs_pointer(new BreadthFirstSearch(startVertex));
    exampleExploration(bfs_pointer);
    adj_list.resetExploration();
    std::shared_ptr<DepthFirstSearch> dfs_pointer(new DepthFirstSearch(startVertex));
    exampleExploration(dfs_pointer);

